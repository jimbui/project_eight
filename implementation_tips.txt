//----------------------------------------------------------
   // SEAT_ROW SEATS --> SEAT_SECTION SEATS IMPLEMENTATION SUGGESTION (test in main method)
   //----------------------------------------------------------

   cout << "==============================================" << endl;
   cout << "Test:  Add_Seats_From_Row(...) implementation" << endl;
   cout << "==============================================" << endl << endl;
   
   // Create seat rows and assign seats to the rows first.  
   // In the actual main method, the data should come from the .xml file.
   Seat_Row* sr[5];

   // Due to the fact that there will be  multiple sections to a seat_row, please change the
   // seat_row constructor.
   sr[0] = new Seat_Row("B", 3, "Front"); 
   sr[1] = new Seat_Row("A", 2, "Front");
   sr[2] = new Seat_Row("E", 5, "Back");
   sr[3] = new Seat_Row("C", 4, "Front");
   sr[4] = new Seat_Row("D", 5, "Back");

	// The total number of rows that are created.
   int row_count = 5;

   // Prints the seat_rows (DEBUGGING ONLY)
   cout << "Seat Rows:  " << endl;

   for (int i = 0; i < row_count; i++)
   {
	   //sr[i]->Display(); // Someone will need to change the display method for seat_row
	   for (int j = 0; j < sr[i]->Number_of_Seats(); j++)
	   {
		   sr[i]->Get_Seat(j)->Display();
		   cout << endl;
	   }
   }

   cout << endl;

   // This would be a good place to call the sort_seat_rows() method in the venue class.

   // Note:  Actual implementation will get these values from the .xml file.
   Seat_Section* ss[1000];
   int section_count = 0;

   // Creates new seat sections only when there is a change in seat section name and when 
   // that new seat section does not exist.  Because seat_section objects are contained
   // in the new_venue class, the actual implementation of this method will be contained
   // in that class.
   string current_section = "";

   // Creates new sections, but DOES NOT ADD SEATS.  After completion of this loop,
   // there will be as many seat_sections as there are different section_names in
   // all of the seat arrays.
   for (int i = 0; i < row_count; i++) // Iterates through all of the seat_rows
   {
	   // Iterates through all seats
	   for (int j = 0; j < sr[i]->Number_of_Seats(); j++)
	   {
		   string new_section_name = sr[i]->Get_Seat(j)->SEAT_SECTION();

		   if (current_section != new_section_name)
		   {
			   bool add_new_section = true;
			   current_section = new_section_name;

			   // Checks to see if there is a section with the requested name
			   // already in existence.
			   for (int k = 0; k < section_count; k++)
			   {
				   if (ss[k]->Get_Name() == new_section_name)
				   {
					   add_new_section = false;
					   break;
				   }
			   }

			   // Creates a new seat_section if there are no other seat sections with the requested name.
			   if (add_new_section)
				   ss[section_count++] = new Seat_Section(new_section_name);
		   }
	   }
   }


   // Add seats to seat sections
   for (int i = 0; i < section_count; i++)
   {
	   for (int j = 0; j < row_count; j++)
	   {
		   ss[i]->Add_Seats_From_Row(*sr[j]);
	   }
   }

   // Prints all existing sections with their seats (UNSORTED)
   cout << "Unsorted Seats (Printing from section):  " << endl;
   for (int i = 0; i < section_count; i++)
   {
	   ss[i]->Display_Seats();
   }
   cout << endl;

   // Sorts all of the seats in each section.  Note:  Because seats are sorted by row in the 
   // project instructions, do not use this method in the main program.  (It may be useful
   // later, however.)
   for (int i = 0; i < section_count; i++)
	   ss[i]->Sort_Seats();

   // Prints all existing sections with their seats (SORTED)
   cout << "Sorted Seats (Printing from section):  " << endl;
   for (int i = 0; i < section_count; i++)
   {
	   ss[i]->Display_Seats();
   }
   //-------------------------------------------------------------------------------------------
